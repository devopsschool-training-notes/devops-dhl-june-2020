Lab - AWS
==================
	START	QB1		LUNCH		QB2	
MTIME - 9 AM 	10.30		12PM		3PM				
ITIME - 6.3 	8:00		9:30AM		12:30
				-------
				1 HOUR
==========================================================
Prod - DHLX
====================
Objective - 
		DEVOPS - 
			Immediate Release
			Quality Release
			Cost Reduction
===================================================
Evolution of Software Deliery?
AKA consuming a software.
====================================
1990 - 2010		2010 - 2015		2015 - 2020
--------------------------------------------------------------
- CD			www			Living				
- Advance payment	NO Adv Payment		NO Adv Payment
- Buy -> Owner		NO OWNER		NO OWNER	
- Exec			Browsers		Devices
- Desktop		VMS
-----------
100 PEOPLE-100 LIC COP	1 COPY for all People	1 COPY for all People

Release
-------------------------------------------------------------------
1 Year 
6 Month			2 WEEKS			20 mins
						2 mins
----------------------------------
-------------------------------------------------------------------
Waterfall		Agile			DevOps	(SRE)	--> DevSecOps -----
-----------------------------------------
Monolithic 		SOA			Microservices
-----------------------------------------
Desktop			Vms			Container
1 day			1 hours			1 Second




====================================================
DHLX

	Software Dev Model --------> Waterfall --> Agile -> DevOps
	Software Dev Architecture -> Monolithic --> SOA -> Microservices
	Software Dev Platform -----> Physical Server -> Vms -> Container
	Technoglogy
			FrontEnd
			Backend
			MiddleWare
================================================================
TEAM & Their Responsibility
=================================
Workflow in the Software Dev From First Step to the Last Step.
====================================================================
Plan -> 			Jira - Confulence			
Code mgmt -> 			Git 			[SESSION]		
Code Analysis -> 
	Peer Code Review	Gerrit
	Static Code Review	SonarQube
Build Mgmt			Maven			[SESSION]
Unit Testing			Junit			[SESSION] - DEMO
Packaging
	System Package		exe - InstallShield
	App Package		jar 
Package Mgmt			Artifactory		[SESSION]
Deployment			Ansible			[SESSION]
Acceptance Testing		Selenium		[SESSION] - DEMO
Coverage			Jacoco			[SESSION] - DEMO		
-----------
CI ----------------------------------------------------
			Jenkins				[SESSION]

Additional Tools - [SESSION] - DEMO - Selenium Grid, Jmeter, UFT


	Release
Deployment			Ansible		
Monitering
	- Log			Splunk
	- Security		MANY
	- Infra			Datadog
	- APM			Newrelic
	- RUM			MANY		
====================================================================
====================================================================
What is Git?
	Source Code mgmt tool	
	Versioning of Source Code [Any file which can open in Notedpad]	
	Binary - PDF - Image - WORD - Movie - Exe
	Would give you info
			WHO 
			What
			When
			Why
			Where 
	Free and Open Source
	Dev by - Linus Torvald
	--------------------------
	Git is distributed.

Other tools
----------------
RCS -> CVS - SVN
Perforce - TFS - VSS - ClearCase

Server-Client VS distributed
=======================================


How to install git?
- Windows	- Exe From git-scm.com
				- git-cmd for windows
				- git-bash for SUPPORTING LINUX COMMAND IN WINDOWS
- Mac		- DMG From git-scm.com 
- Linux		- CMD
		RHEL - sudo yum install git
		ubuntu - sudo apt-get install git

 501  pwd
  502  start .
  503  cd /e
  504  pwd
  505  start .
  506  mkdir dhl
  507  clear
  508  cd dhl/
  509  start .
  510  pwd
  511  history
=============================================
Basic Workflow with Git.

Step 1: Create a repo				DONE
git init

Step 2: Generate a Source code using IDE	DONE	

Step 3: Add a Code into Git [ From Working dir to Staging area ]	
git add filename

[ONE TIME]
git config user.name "Rajesh Kumar"
git config user.email "devops@rajeshkumar.xyz"
git config --list

Step 4: Commit a code into git. [ From Staging to Repository ]
git commit -m"adding first version"

Step 5: See a commited a file
$ git log
commit 94109a51d2dd34e0f42a2255aee9e81add9fd9df (HEAD -> master)
Author: Rajesh Kumar <devops@rajeshkumar.xyz>
Date:   Wed Jul 1 11:08:05 2020 +0530

    adding first version

94109a51d2dd34e0f42a2255aee9e81add9fd9df = Commit ID aka Checksum. == SHA1

Step 6
$ git show 94109a51d2dd34e0f42a2255aee9e81add9fd9df
commit 94109a51d2dd34e0f42a2255aee9e81add9fd9df (HEAD -> master)
Author: Rajesh Kumar <devops@rajeshkumar.xyz>
Date:   Wed Jul 1 11:08:05 2020 +0530

    adding first version

diff --git a/file1.java b/file1.java
new file mode 100644
index 0000000..e69de29

Concept of Git Workspace Anatomy?
=======================================
git checkout master	# for latest
git checkout 94109a51d2dd34e0f42a2255aee9e81add9fd9df	# for Older
git status	
=========================================================
=========================================================







============
Github
	Github Server have a capability such as
	- Hosting Multiple Repo
	- GUI
	- Issues
	- Wiki
	- RBAC
	- Org
	- This
	- That

===================
Github RBAC
----------------
Admin would do
- Create a ORG	DONE	https://github.com/dhl-test
- Create a TEAM 		DONE
- Create a Project		DONE
- Create a repo in Project
- Create a TEAM to REPO OR Project.

Dev would do
- Clone repo
- Add and Commit and Branch - merge - delete - Do whatever
- Push it.

====================================
Assignment 1
- Register at github.com
- Get your ID
- Create a Remote repo at github
- Push your local repo to remote repo

Assignment 2
- Give me your github iD
- I would add in you my repo with write access to all
- We would do clone to one common repo - https://github.com/devopsschool-demo-temporary/dhl-july
- We would do pull and push to our common repo as a team.

==========================================================
==========================================================
Branching & Merging
-----------------------------
Why Branch???
-----------------
BUG fixing - Dont want to upset main branch
Enahancement  - Dont want to upset main working branch
Diff team - We create a branch
Diff Geo - We create a branch.
===================================
BRANCHING IS FREE in Git.


Types of branch?
- -------
Local Branch - default - master - RW
Remote Branch - RO
Temp Branch
	Checkout Remote branch
	Checkout Specific Commit id
PULL === FETCH + MERGE
=================================
Branching and Merging Stratergy
==================================
- Fast forward
- Recursive
- Cherry pIck


 506  ls
  507  clear
  508  ls
  509  git branch -a
  510  ls
  511  clear
  512  git pull origin master
  513  clear
  514  touch fetch1.txt;git add .;git commit -m"adding"
  515  git push origin master
  516  clear
  517  git branch
  518  git branch fea1
  519  git branch
  520  ls
  521  clear
  522  git branch
  523  git diff fea1
  524  git checkout fea1
  525  clear
  526  git branch
  527  ls
  528  touch fea1.txt;git add .;git commit -m"fea1"
  529  touch fea2.txt;git add .;git commit -m"fea2"
  530  clear
  531  git log --oneline
  532  ckear
  533  clear
  534  git checkout master
  535  git log --oneline
  536  ar
  537  clear
  538  ls
  539  git merge fea1
  540  ls
  541  clear
  542  ls
  543  git diff fea1
  544  git checkout fea1
  545  clear
  546  touch fea3.txt;git add .;git commit -m"fea3"
  547  touch fea4.txt;git add .;git commit -m"fea4"
  548  git checkout master
  549  touch master1.txt;git add .;git commit -m"master1"
  550  clear
  551  touch master2.txt;git add .;git commit -m"master2"
  552  clear
  553  s
  554  git checkout fea1
  555  touch fea5.txt;git add .;git commit -m"fea5"
  556  clear
  557  git log --oneline
  558  clear
  559  git checkout master
  560  git log --oneline
  561  clear
  562  git diff fea1
  563  clear
  564  git merge fea1
  565  git checkout fea1
  566  clear
  567  touch fea6.txt;git add .;git commit -m"fea6"
  568  touch fea7.txt;git add .;git commit -m"fea7"
  569  touch fea8.txt;git add .;git commit -m"fea8"
  570  clear
  571  git log --oneline
  572  clear
  573  git checkout master
  574  git cherry-pick 42d4033
  575  ls
  576  clear
  577  git branch
  578  git push origin fea1
  579  history

===================================================
===================================================
Resolving a Real Merge Conflict
Git Undoing
	= getting rid of new files from working dir
	- git clean -f d-


	= From Staging to working
	- git reset filename
	
	==from repo - you should always revert back..NOT UNDO...undo is very dangergious.
	using git revert
======================================

e521547 (HEAD -> master) Revert "adding bad commit"
e5eff10 adding bad commit
1cf0532 a






















	













